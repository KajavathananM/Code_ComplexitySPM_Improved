{"ast":null,"code":"/**\n * Copyright (c) 2017-present, Ephox, Inc.\n *\n * This source code is licensed under the Apache 2 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as ScriptLoader from '../ScriptLoader';\nimport { getTinymce } from '../TinyMCE';\nimport { bindHandlers, isFunction, isTextarea, mergePlugins, uuid } from '../Utils';\nimport { EditorPropTypes } from './EditorPropTypes';\nvar scriptState = ScriptLoader.create();\n\nvar Editor =\n/** @class */\nfunction (_super) {\n  __extends(Editor, _super);\n\n  function Editor(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.initialise = function () {\n      var finalInit = __assign({}, _this.props.init, {\n        target: _this.elementRef.current,\n        readonly: _this.props.disabled,\n        inline: _this.inline,\n        plugins: mergePlugins(_this.props.init && _this.props.init.plugins, _this.props.plugins),\n        toolbar: _this.props.toolbar || _this.props.init && _this.props.init.toolbar,\n        setup: function (editor) {\n          _this.editor = editor;\n          editor.on('init', function (e) {\n            _this.initEditor(e, editor);\n          });\n\n          if (_this.props.init && typeof _this.props.init.setup === 'function') {\n            _this.props.init.setup(editor);\n          }\n        }\n      });\n\n      if (isTextarea(_this.elementRef.current)) {\n        _this.elementRef.current.style.visibility = '';\n      }\n\n      getTinymce().init(finalInit);\n    };\n\n    _this.id = _this.props.id || uuid('tiny-react');\n    _this.elementRef = React.createRef();\n    _this.inline = _this.props.inline ? _this.props.inline : _this.props.init && _this.props.init.inline;\n    _this.boundHandlers = {};\n    return _this;\n  }\n\n  Editor.prototype.componentDidUpdate = function (prevProps) {\n    if (this.editor && this.editor.initialized) {\n      bindHandlers(this.editor, this.props, this.boundHandlers);\n      this.currentContent = this.currentContent || this.editor.getContent();\n\n      if (typeof this.props.value === 'string' && this.props.value !== prevProps.value && this.props.value !== this.currentContent) {\n        this.editor.setContent(this.props.value);\n      }\n\n      if (typeof this.props.disabled === 'boolean' && this.props.disabled !== prevProps.disabled) {\n        this.editor.setMode(this.props.disabled ? 'readonly' : 'design');\n      }\n    }\n  };\n\n  Editor.prototype.componentDidMount = function () {\n    if (getTinymce() !== null) {\n      this.initialise();\n    } else if (this.elementRef.current && this.elementRef.current.ownerDocument) {\n      var doc = this.elementRef.current.ownerDocument;\n      var channel = this.props.cloudChannel;\n      var apiKey = this.props.apiKey ? this.props.apiKey : 'no-api-key';\n      ScriptLoader.load(scriptState, doc, \"https://cdn.tiny.cloud/1/\" + apiKey + \"/tinymce/\" + channel + \"/tinymce.min.js\", this.initialise);\n    }\n  };\n\n  Editor.prototype.componentWillUnmount = function () {\n    if (getTinymce() !== null) {\n      getTinymce().remove(this.editor);\n    }\n  };\n\n  Editor.prototype.render = function () {\n    return this.inline ? this.renderInline() : this.renderIframe();\n  };\n\n  Editor.prototype.initEditor = function (initEvent, editor) {\n    var _this = this;\n\n    var value = typeof this.props.value === 'string' ? this.props.value : typeof this.props.initialValue === 'string' ? this.props.initialValue : '';\n    editor.setContent(value);\n\n    if (isFunction(this.props.onEditorChange)) {\n      editor.on('change keyup setcontent', function (e) {\n        _this.currentContent = editor.getContent();\n\n        if (isFunction(_this.props.onEditorChange)) {\n          _this.props.onEditorChange(_this.currentContent, editor);\n        }\n      });\n    }\n\n    if (isFunction(this.props.onInit)) {\n      this.props.onInit(initEvent, editor);\n    }\n\n    bindHandlers(editor, this.props, this.boundHandlers);\n  };\n\n  Editor.prototype.renderInline = function () {\n    var _a = this.props.tagName,\n        tagName = _a === void 0 ? 'div' : _a;\n    return React.createElement(tagName, {\n      ref: this.elementRef,\n      id: this.id\n    });\n  };\n\n  Editor.prototype.renderIframe = function () {\n    return React.createElement('textarea', {\n      ref: this.elementRef,\n      style: {\n        visibility: 'hidden'\n      },\n      name: this.props.textareaName,\n      id: this.id\n    });\n  };\n\n  Editor.propTypes = EditorPropTypes;\n  Editor.defaultProps = {\n    cloudChannel: '5'\n  };\n  return Editor;\n}(React.Component);\n\nexport { Editor };","map":null,"metadata":{},"sourceType":"module"}